/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface WavePortalInterface extends utils.Interface {
  functions: {
    "ownerAddress()": FunctionFragment;
    "wave()": FunctionFragment;
    "waves(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "ownerAddress" | "wave" | "waves"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ownerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wave", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "waves",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ownerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wave", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "waves", data: BytesLike): Result;

  events: {
    "GotWavesFromUser(uint256)": EventFragment;
    "Waved(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GotWavesFromUser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Waved"): EventFragment;
}

export interface GotWavesFromUserEventObject {
  wavesFromUser: BigNumber;
}
export type GotWavesFromUserEvent = TypedEvent<
  [BigNumber],
  GotWavesFromUserEventObject
>;

export type GotWavesFromUserEventFilter =
  TypedEventFilter<GotWavesFromUserEvent>;

export interface WavedEventObject {
  wavesOfUser: BigNumber;
  wavedBy: string;
}
export type WavedEvent = TypedEvent<[BigNumber, string], WavedEventObject>;

export type WavedEventFilter = TypedEventFilter<WavedEvent>;

export interface WavePortal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WavePortalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ownerAddress(overrides?: CallOverrides): Promise<[string]>;

    wave(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    waves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  ownerAddress(overrides?: CallOverrides): Promise<string>;

  wave(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  waves(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    ownerAddress(overrides?: CallOverrides): Promise<string>;

    wave(overrides?: CallOverrides): Promise<void>;

    waves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "GotWavesFromUser(uint256)"(
      wavesFromUser?: null
    ): GotWavesFromUserEventFilter;
    GotWavesFromUser(wavesFromUser?: null): GotWavesFromUserEventFilter;

    "Waved(uint256,address)"(
      wavesOfUser?: null,
      wavedBy?: null
    ): WavedEventFilter;
    Waved(wavesOfUser?: null, wavedBy?: null): WavedEventFilter;
  };

  estimateGas: {
    ownerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    wave(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    waves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ownerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wave(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    waves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
